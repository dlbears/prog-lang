{"version":3,"sources":["server/app.cljc"],"mappings":"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","names":["server.app/str->int","s","server.app/optional","pattern","server.app/alphabet-pattern","server.app/operator-pattern","server.app/operator-re","server.app/unary-negation-pattern","server.app/letter-pattern","server.app/natural-pattern","server.app/literal-pattern","p1__44218#","server.app/matches-pattern?","input","matches","cljs.core._EQ_","cljs.core/re-matches","cljs.core/re-pattern","something?","server.app/matches-literal?","server.app/matches-operator?","server.app/re->gram","server.app/op-precedence","op","cljs.core.match/backtrack","e44220","js/Error","e__43159__auto__","e44221","e44222","e44223","server.app/sigma-pattern","server.app/w*","server.app/wrap-w*","t","server.app/lang-grammar","server.app/unary-grammar","server.app/handle-negation","acc","token","tokens-processed","cljs.core/count","start?","cljs.core/vector?","token_left__44225","cljs.core.subvec","token_left__44225_0__44227","cljs.core.nth","cljs.core/keyword-identical?","e44231","e44230","e44229","head","rest","addition-head?","negation-head?","negation-count","negation?","cljs.core/mod","cljs.core.concat","e44266","e44250","e44263","e44265","e44264","e44251","e44262","e44261","e44252","e44260","e44253","e44259","e44254","e44258","e44255","e44257","e44256","server.app/process-unary","source","parse-unary","instaparse.core/parser","wrapped-src","cljs.core/first","cljs.core/last","unary-ast","left-parens","p1__44267#","cljs.core.filter","right-parens","p1__44268#","trim-ast","cljs.core/rest","cljs.core/butlast","cljs.core.reduce","p__44271","map__44272","cljs.core/--destructure-map","cljs.core.get","server.app/convert-postfix","stack","postfix","literal?","e44274","e44275","e44276","p1__44269#","paren-cond","cljs.core.not_EQ_","popped","cljs.core.take_while","cljs.core/reverse","remaining","cljs.core.drop_last","prec-stack","prec-token","res","p1__44270#","prec-cond","server.app/reduce-postfix","map__44277","cljs.core.drop","server.app/solve-postfix","v","digit?","cljs.core/integer?","cljs.core.apply","server.app/to-primitive","p1__44278#","p2__44279#","e44285","p1__44280#","p2__44281#","e44286","p1__44282#","p2__44283#","e44287","server.app/assign-lit","vars","name","lit","cljs.core.assoc","server.app/resolve-id","id","value","value?","server.app/resolve-all","exp-terms","cljs.core.map","et","et_left__44289","et_left__44289_0__44291","e44294","e44295","e44293","e44292","cljs.core/str","server.app/matcher","variable-map","assignment","assignment_0__44297","assignment_1__44298","assignment_1__44298_left__44300","assignment_1__44298_left__44300_0__44302","assignment_2__44299","assignment_2__44299_left__44303","assignment_2__44299_left__44303_0__44305","e44326","e44327","e44325","e44324","e44323","e44322","e44321","e44320","e44313","assignment_left__44306","assignment_left__44306_0__44308","assignment_left__44306_1__44309","assignment_left__44306_1__44309_left__44310","assignment_left__44306_1__44309_left__44310_0__44312","e44319","e44318","e44317","e44316","e44315","e44314","r","resolved-ids","resolved-unary","postfix-transform","primitive-transform","result","server.app/parser","server.app/interpreter","AST","variables","p1__44328#","p2__44329#","e44330","e","server.app/input-state","reagent.core.atom","server.app/output-state","server.app/app","props","evt","cljs.core/reset!","cljs.core/deref","output","output-string?","p__44331","vec__44332","k","cljs.core/seq","server.app/-main","root","js/document","reagent.dom.render"],"sourcesContent":["#?(:browser\n   (ns server.app\n     (:require [instaparse.core :as insta]\n               [reagent.core :as r]\n               [reagent.dom :as rdom]\n               [cljs.core.match :refer-macros [match]]\n               [cljs.core :refer [re-matches]]\n               [cljs.pprint :refer [pprint]]))\n\n   :cljs\n   (ns server.app\n     (:require [instaparse.core :as insta]\n               [\"fs\" :refer [readFileSync]]\n               [cljs.core.match :refer-macros [match]]\n               [cljs.core :refer [re-matches]]\n               [cljs.pprint :refer [pprint]]))\n   :clj\n   (ns server.app (:require [instaparse.core :as insta]\n                            [clojure.pprint :refer [pprint]]\n                            [clojure.core.match :refer [match]]\n                            [clojure.core :refer [re-matches slurp]]\n                            [clojure.tools.cli :refer [parse-opts]])\n       (:gen-class)))\n\n\n\n#?(:clj (defn readFileSync [p] (slurp p)))\n#?(:clj (defn str->int [s] (if (integer? s) s (Integer/parseInt s)))\n   :cljs (defn str->int [s] (int s)))\n\n(defn optional [pattern] (str pattern \\?))\n(def alphabet-pattern \"[A-z0-9_]+\")\n\n(def operator-pattern \"('*'|'+'|'-')\")\n(def operator-re \"[\\\\*\\\\+\\\\-\\\\(]\")\n(def unary-negation-pattern \"('*'|'+'|'-'|'(')'-'+\") \n(def letter-pattern \"[A-z_]\")\n(def natural-pattern \"[1-9]\")\n(def literal-pattern \"-?([1-9]+[0-9]*)|0\")\n\n(defn matches-pattern? [pattern] #(let\n                                   [input (str %)\n                                    matches (if (= 0 (count input)) nil (re-matches (re-pattern pattern) input))\n                                    something? (not (nil? matches))]\n                                    something?))\n(def matches-literal? (matches-pattern? literal-pattern))\n(def matches-operator? (matches-pattern? operator-re))\n\n(defn re->gram [pattern] (str \"#'\" pattern \"'\"))\n(defn op-precedence [op] (match [op]\n                           [\"*\"] 2\n                           [\"-\"] 1\n                           [\"+\"] 1\n                           [\"(\"] 0\n                           :else -1))\n\n(def sigma-pattern (str \"('*'|'+'|'-'|'('|')'|\" (re->gram alphabet-pattern)  \")\"))\n(def w* \" <#'\\\\s*'> \")\n(defn wrap-w* [t] (str w* t w*))\n;; Grammar Spec, where <> denotes suppression from resulting AST\n(def lang-grammar (str \"\n                      <Program> = Assignment*\n                      Assignment = Identifier\" (wrap-w* \"<'='>\") \"Exp <';'>\" w* \"\n                      <Exp> = Exp \" (wrap-w* \"'+'\") \" Term | Exp \" (wrap-w* \"'-'\") \" Term | Term\n                      <Term> = Term \" (wrap-w* \"'*'\") \" Fact | Fact\n                      <Fact> = \" (wrap-w* \"'('\") \" Exp \" (wrap-w* \"')'\") \" | '-' Fact | <'+'> Fact | Literal | Identifier \n                      Identifier = Letter (Letter | Digit)*\n                      Literal = '0' | (NonZeroDigit Digit*)\n                      <Letter> = \" (re->gram letter-pattern) \"\n                      <NonZeroDigit> = \" (re->gram natural-pattern) \"\n                      <Digit> = '0'|NonZeroDigit\"))\n\n(def unary-grammar (str\n                    \"<Root> = (S|Rest)*\n                    <S> = Rest* Unary Rest+\n                    Unary = \" unary-negation-pattern \"\n                    <Rest> = '('* \" (wrap-w* (re->gram alphabet-pattern)) \" ')'* \" (wrap-w* (optional operator-pattern)) \" Rest* \"))\n(defn handle-negation [acc token]\n  (let [tokens-processed (count acc)\n        start? (= 0 tokens-processed)]\n    (match token\n      [:Unary head & rest]\n      (let [addition-head? (= head \"+\")\n            negation-head? (= head \"-\")\n            negation-count (count rest)\n            negation? (= 1 (mod negation-count 2))]\n        (concat acc\n                (match [start? negation? addition-head? negation-head?]\n                  [true true _ _] [\"~\"]\n                  [true false _ _] acc\n                  [_ false false false] [head]\n                  [_ true false false] [head \"~\"]\n                  [_ false _ true] [\"-\"]\n                  [_ true true _] [\"-\"]\n                  [_ false true _] [\"+\"]\n                  [_ true _ true] [\"+\"])))\n      :else (concat acc [token]))))\n\n\n(defn process-unary [source]\n  (let [parse-unary (insta/parser unary-grammar)\n        wrapped-src (if (and (= \\( (first source)) (= \\) (last source))) source (str \"(\" source \")\"))\n        unary-ast (parse-unary wrapped-src)\n        left-parens (count (filter #(= % \"(\") unary-ast))\n        right-parens (count (filter #(= % \")\") unary-ast))\n        trim-ast (cond (>= left-parens right-parens) (rest unary-ast) \n                       (< left-parens right-parens) unary-ast)]\n    (butlast (reduce handle-negation [] trim-ast))))\n\n(defn convert-postfix [{:keys [stack postfix]} token]\n  (let [literal? (matches-literal? token)]\n    (if literal? {:stack stack :postfix (concat postfix [token])}\n        (match [token]\n          [\"~\"] (if (> (count postfix) 0) {:stack stack :postfix (concat postfix [-1 \"*\"])} {:stack (concat stack [\"*\"]) :postfix (concat postfix [-1])})\n          [\"(\"] {:stack (concat stack [token]) :postfix postfix}\n          [\")\"] (let [paren-cond #(and (not= \"(\" %) (not= \"$\" %))\n                      popped (take-while paren-cond (reverse stack))\n                      remaining (drop-last (inc (count popped)) stack)]\n                  {:stack remaining :postfix (concat postfix popped)})\n          :else (let [prec-stack (op-precedence (last stack))\n                      prec-token (op-precedence token)\n                      res (if (> prec-token prec-stack)\n                            {:stack (concat stack [token]) :postfix postfix}\n                            (let [prec-cond #(and (not= \"$\" %) (<= prec-token (op-precedence %)))\n                                  popped (take-while prec-cond (reverse stack))\n                                  remaining (drop-last (count popped) stack)]\n                              {:stack (concat remaining [token]) :postfix (concat postfix popped)}))]\n                  res)))))\n\n(defn reduce-postfix\n  ([input]\n   (let\n    [{:keys [stack postfix]} (reduce convert-postfix {:stack [\"$\"] :postfix []} input)]\n     (if (= 0 (count stack))\n       postfix\n       (concat postfix (reverse (drop 1 stack)))))))\n(defn solve-postfix [s v] (let [digit? (integer? v)]\n                            (if digit? (concat s [v])\n                                (let [res (apply v [(last (butlast s)) (last s)])]\n                                  (concat (butlast (butlast s)) [res])))))\n(defn to-primitive [t] (let [token (str t)\n                             digit? (matches-literal? token)]\n                         (if digit? (str->int token)\n                             (match [t]\n                               [\"+\"] #(+ %1 %2)\n                               [\"-\"] #(- %1 %2)\n                               [\"*\"] #(* %1 %2)))))\n\n(defn assign-lit [vars name lit] (assoc vars name (str->int lit)))\n(defn resolve-id [vars id] (let [value (get vars id)\n                                 value? (not (nil? value))]\n                             (if value? value (throw #?(:clj (Throwable. (str \"Lookup Error: Undeclared Variable \" id))\n                                                        :cljs (str \"Lookup Error: Undeclared Variable \" id))))))\n(defn resolve-all [vars exp-terms]\n  (map (fn [et]\n         (match et\n           [:Literal & lit] (str->int (apply str lit))\n           [:Identifier & id] (resolve-id vars (apply str id))\n           :else et)) exp-terms))\n(defn matcher [variable-map assignment]\n  (match assignment\n    [:Assignment [:Identifier & name] [:Literal & rest]] (assign-lit variable-map (apply str name) (apply str rest))\n    [:Assignment [:Identifier & name] [:Identifier & id]] (assign-lit variable-map (apply str name) (resolve-id variable-map (apply str id)))\n    [:Assignment [:Identifier & name] & r] (let [resolved-ids (apply str (resolve-all variable-map r))\n                                                 resolved-unary (process-unary resolved-ids)\n                                                 postfix-transform (reduce-postfix resolved-unary)\n                                                 primitive-transform (map to-primitive postfix-transform)\n                                                 result (first (reduce solve-postfix [] primitive-transform))]\n                                             (assign-lit variable-map (apply str name) result))))\n\n(def parser (insta/parser lang-grammar))\n\n(defn interpreter [source]\n  (let [AST (parser source)\n        variables {}]\n    (cond\n      (:reason AST) (str \"Syntax Error: Expecting { \" (apply str (drop 3 (reduce #(str %1 \" or \" (:expecting %2)) \"\" (:reason AST)))) \" }\")\n      :else (try (reduce matcher variables AST) #?(:clj (catch Throwable e (str e))\n                                                   :cljs (catch :default e e))))))\n\n#?(:browser (do\n              (def input-state (r/atom \"\"))\n              (def output-state (r/atom \"\"))\n              (defn app [props]\n                [:div\n                 \"Source Code: \"\n                 [:br]\n                 [:textarea {:on-change (fn [evt] (reset! input-state (.-value (.-target evt)))) :rows \"10\" :columns \"50\"}]\n                 [:br]\n                 [:button {:on-click #(reset! output-state (interpreter @input-state))} \"Submit\"]\n                 [:div \"Output: \"]\n                 [:br]\n                 (let [output @output-state\n                       output-string? (string? output)]\n                   (if output-string? [:div output]\n                       (map (fn [[k v]] [:div (str k \" = \" v)]) (seq output))))])))\n\n#?(:browser (defn -main [] (let [root (.getElementById js/document \"root\")] (rdom/render [app] root)))\n   :default (defn -main\n              ([] nil)\n              ([filepath]\n               (let\n                [input (readFileSync filepath #?(:cljs #js{:encoding \"utf8\"}))\n                 output (interpreter input)]\n                 (if (string? output)\n                   (println output)\n                   (doseq [[id val] output] (println (str id \" = \" val))))))))\n\n#?(:browser (do (-main)))\n"]}