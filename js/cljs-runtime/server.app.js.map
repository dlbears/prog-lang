{"version":3,"sources":["server/app.cljc"],"mappings":"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","names":["server.app/str->int","s","server.app/optional","pattern","server.app/alphabet-pattern","server.app/operator-pattern","server.app/operator-re","server.app/unary-negation-pattern","server.app/letter-pattern","server.app/natural-pattern","server.app/literal-pattern","p1__59662#","server.app/matches-pattern?","matches","cljs.core._EQ_","cljs.core/count","cljs.core/re-matches","cljs.core/re-pattern","something?","server.app/matches-literal?","server.app/matches-operator?","server.app/re->gram","server.app/w*","server.app/wrap-w*","t","server.app/lang-grammar","server.app/unary-grammar","cljs.pprint.pprint","server.app/handle-negation","acc","token","tokens-processed","start?","cljs.core/vector?","token_left__59664","cljs.core.subvec","token_left__59664_0__59666","cljs.core.nth","cljs.core/keyword-identical?","cljs.core.match/backtrack","e59670","js/Error","e__54880__auto__","e59669","e59668","head","rest","addition-head?","negation-head?","negation-count","negation?","cljs.core/mod","cljs.core.concat","e59705","e59689","e59702","e59704","e59703","e59690","e59701","e59700","e59691","e59699","e59692","e59698","e59693","e59697","e59694","e59696","e59695","server.app/process-unary","source","parse-unary","instaparse.core/parser","cljs.core.reduce","p__59709","map__59710","cljs.core/--destructure-map","cljs.core.get","server.app/convert-postfix","stack","postfix","litOrOp","e59712","e59713","e59714","popped","p1__59706#","cljs.core.take_while","cljs.core.not_EQ_","cljs.core/reverse","remaining","p1__59707#","next-pf","op-pf?","op-stack?","cljs.core/last","paren-stack?","p1__59708#","cljs.core/some","is-lit?","newStack","e59734","e59733","e59732","e59725","e59731","e59730","e59729","e59726","e59727","e59728","cljs.core/butlast","newPostFix","e59758","e59757","e59756","e59745","e59755","e59754","e59753","e59746","e59752","e59751","e59750","e59747","e59748","e59749","server.app/reduce-postfix","input","map__59759","server.app/solve-postfix","v","digit?","cljs.core/integer?","cljs.core.apply","server.app/to-primitive","p1__59760#","p2__59761#","e59767","p1__59762#","p2__59763#","e59768","p1__59764#","p2__59765#","e59769","server.app/assign-lit","vars","name","lit","cljs.core.assoc","server.app/resolve-id","id","value","value?","server.app/resolve-all","exp-terms","cljs.core.map","et","et_0__59771","e59774","e59775","e59773","server.app/matcher","variable-map","assignment","assignment_0__59777","assignment_1__59778","assignment_1__59778_0__59780","assignment_2__59779","assignment_2__59779_left__59782","assignment_2__59779_left__59782_0__59784","e59806","e59805","e59802","assignment_2__59779_0__59785","e59804","e59803","e59801","e59800","e59799","e59793","assignment_left__59787","assignment_left__59787_0__59789","assignment_left__59787_1__59790","assignment_left__59787_1__59790_0__59791","e59798","e59797","e59796","e59795","e59794","cljs.core/str","r","resolved-ids","resolved-unary","postfix-transform","primitive-transform","result","cljs.core/first","server.app/parser","server.app/interpreter","AST","variables","cljs.core.drop","p1__59807#","p2__59808#","server.app/input-state","reagent.core.atom","server.app/output-state","server.app/app","props","evt","cljs.core/reset!","cljs.core/deref","server.app/-main","root","js/document","reagent.dom.render","cljs.core.print"],"sourcesContent":["#?(:browser\n   (ns server.app\n     (:require [instaparse.core :as insta]\n               [reagent.core :as r]\n               [reagent.dom :as rdom]\n               [cljs.core.match :refer-macros [match]]\n               [cljs.core :refer [re-matches]]\n               [cljs.pprint :refer [pprint]]))\n\n   :cljs\n   (ns server.app\n     (:require [instaparse.core :as insta]\n               [\"fs\" :refer [readFileSync]]\n               [cljs.core.match :refer-macros [match]]\n               [cljs.core :refer [re-matches]]\n               [cljs.pprint :refer [pprint]]))\n   :clj\n   (ns server.app (:require [instaparse.core :as insta]\n                            [clojure.pprint :refer [pprint]]\n                            [clojure.core.match :refer [match]]\n                            [clojure.core :refer [re-matches slurp]]\n                            [clojure.tools.cli :refer [parse-opts]])\n       (:gen-class)))\n\n\n\n#?(:clj (defn readFileSync [p] (slurp p)))\n#?(:clj (defn str->int [s] (if (integer? s) s (Integer/parseInt s)))\n   :cljs (defn str->int [s] (int s)))\n\n(defn optional [pattern] (str pattern \\?))\n(def alphabet-pattern \"[A-z0-9_]+\")\n(def operator-pattern \"('*'|'+'|'-')\")\n(def operator-re \"[\\\\*\\\\+\\\\-]\")\n(def unary-negation-pattern \"('*'|'+'|'-'|'(')'-'+\")\n(def letter-pattern \"[A-z_]\")\n(def natural-pattern \"[1-9]\")\n(def literal-pattern \"-?([1-9]+[0-9]*)|0\")\n\n(defn matches-pattern? [pattern] #(let\n                                   [matches (if (= 0 (count %)) nil (re-matches (re-pattern pattern) %))\n                                    something? (not (nil? matches))]\n                                    something?))\n(def matches-literal? (matches-pattern? literal-pattern))\n(def matches-operator? (matches-pattern? operator-re))\n\n(defn re->gram [pattern] (str \"#'\" pattern \"'\"))\n\n(def w* \" <#'\\\\s*'> \")\n(defn wrap-w* [t] (str w* t w*))\n;; Grammar Spec, where <> denotes suppression from resulting AST\n(def lang-grammar (str \"\n                      <Program> = Assignment*\n                      Assignment = Identifier\" (wrap-w* \"<'='>\") \"Exp <';'>\" w* \"\n                      <Exp> = Exp \" (wrap-w* \"'+'\") \" Term | Exp \" (wrap-w* \"'-'\") \" Term | Term\n                      <Term> = Term \" (wrap-w* \"'*'\") \" Fact | Fact\n                      <Fact> = \" (wrap-w* \"'('\") \" Exp \" (wrap-w* \"')'\") \" | '-' Fact | <'+'> Fact | Literal | Identifier \n                      Identifier = Letter (Letter | Digit)*\n                      Literal = '0' | (NonZeroDigit Digit*)\n                      <Letter> = \" (re->gram letter-pattern) \"\n                      <NonZeroDigit> = \" (re->gram natural-pattern) \"\n                      <Digit> = '0'|NonZeroDigit\"))\n\n(def unary-grammar (str\n                    \"<Root> = (S|Rest)*\n                    <S> = Rest* Unary Rest+\n                    Unary = \" unary-negation-pattern \"\n                    <Rest> = '('? \" (wrap-w* (re->gram alphabet-pattern)) \" ')'? \" (wrap-w* (optional operator-pattern)) \" Rest* \"))\n\n(pprint (str\n         \"<Root> = (S|Rest)*\n                    <S> = Rest* Unary Rest+\n                    Unary = \" unary-negation-pattern \"\n                    <Rest> = '('? \" (wrap-w* (re->gram alphabet-pattern)) \" ')'? \" (wrap-w* (optional operator-pattern)) \" Rest* \"))\n\n\n(defn handle-negation [acc token]\n  (let [tokens-processed (count acc)\n        start? (= 0 tokens-processed)]\n    (match token\n      [:Unary head & rest]\n      (let [addition-head? (= head \"+\")\n            negation-head? (= head \"-\")\n            negation-count (count rest)\n            negation? (= 1 (mod negation-count 2))]\n        (concat acc\n                (match [start? negation? addition-head? negation-head?]\n                  [true true _ _] [\"~\"]\n                  [true false _ _] acc\n                  [_ false false false] [head]\n                  [_ true false false] [head \"~\"]\n                  [_ false _ true] [\"-\"]\n                  [_ true true _] [\"-\"]\n                  [_ false true _] [\"+\"]\n                  [_ true _ true] [\"+\"])))\n      :else (concat acc [token]))))\n\n(defn process-unary [source]\n  (let [parse-unary (insta/parser unary-grammar)]\n    (pprint (parse-unary source))\n    (reduce handle-negation [] (parse-unary source))))\n\n\n(defn convert-postfix [{:keys [stack postfix]} litOrOp]\n  (match [litOrOp]\n    [\"~\"] (if (> (count postfix) 0) {:stack stack :postfix (concat postfix [-1 \"*\"])} {:stack (concat stack [\"*\"]) :postfix (concat postfix [-1])})\n    [\"(\"] {:stack (concat stack [litOrOp]) :postfix postfix}\n    [\")\"] (let [popped (take-while #(not= \"(\" %) (reverse stack))\n                remaining (take-while #(not= \"(\" %) stack)]\n            {:stack remaining :postfix (concat postfix popped)})\n    :else (let [next-pf (concat postfix [litOrOp])\n                op-pf? (> (count next-pf) 1)\n                op-stack? (matches-operator? (last stack))\n                paren-stack? (not (nil? (some #(= \"(\" %) stack)))\n                is-lit?  (matches-literal? litOrOp)\n                newStack (match [op-stack? op-pf? paren-stack? is-lit?]\n                           [true true false true] (butlast stack)\n                           [true true false false] (concat (butlast stack) [litOrOp])\n                           [_ _ _ true] stack\n                           [_ _ _ false] (concat stack [litOrOp]))\n                newPostFix (match [op-stack? op-pf? paren-stack? is-lit?]\n                             [true true true false] (concat postfix [(last stack)])\n                             [true true false true] (concat next-pf [(last stack)])\n                             [true true false false] next-pf\n                             [_ _ _ true] next-pf\n                             [_ _ _ false] postfix)]\n            {:stack newStack :postfix newPostFix})))\n\n(defn reduce-postfix\n  ([input] (let\n            [{:keys [stack postfix]} (reduce convert-postfix {:stack [] :postfix []} input)]\n             (if (= 0 (count stack))\n               postfix\n               (concat postfix (reverse stack))))))\n(defn solve-postfix [s v] (let [digit? (integer? v)]\n                            (if digit? (concat s [v])\n                                (concat (butlast (butlast s)) [(apply v [(last (butlast s)) (last s)])]))))\n(defn to-primitive [t] (let [token (str t)\n                             digit? (matches-literal? token)]\n                         (if digit? (str->int token)\n                             (match [t]\n                               [\"+\"] #(+ %1 %2)\n                               [\"-\"] #(- %1 %2)\n                               [\"*\"] #(* %1 %2)))))\n\n(defn assign-lit [vars name lit] (assoc vars name (str->int lit)))\n(defn resolve-id [vars id] (let [value (get vars id)\n                                 value? (not (nil? value))]\n                             (if value? value (throw \"LookupError: Undeclared Variable\"))))\n(defn resolve-all [vars exp-terms]\n  (map (fn [et]\n         (match et\n           [:Literal lit] (str->int lit)\n           [:Identifier id] (resolve-id vars id)\n           :else et)) exp-terms))\n(defn matcher [variable-map assignment]\n  (match assignment\n    [:Assignment [:Identifier name] [:Literal & rest]] (assign-lit variable-map name (apply str rest))\n    [:Assignment [:Identifier name] [:Identifier id]] (assign-lit variable-map name (resolve-id variable-map id))\n    [:Assignment [:Identifier name] & r] (let [resolved-ids (apply str (resolve-all variable-map r))\n                                               resolved-unary (process-unary resolved-ids)\n                                               postfix-transform (reduce-postfix resolved-unary)\n                                               primitive-transform (map to-primitive postfix-transform)\n                                               result (first (reduce solve-postfix [] primitive-transform))]\n                                           (assign-lit variable-map name result))))\n\n(def parser (insta/parser lang-grammar))\n\n(defn interpreter [source]\n  (let [AST (parser source)\n        variables {}]\n    (if (:reason AST) \n        (str \"Syntax Error: Expecting { \" (apply str (drop 3 (reduce #(str %1 \" or \" (:expecting %2)) \"\" (:reason AST)))) \" }\") \n        (reduce matcher variables AST))))\n\n#?(:browser (do\n              (def input-state (r/atom \"\"))\n              (def output-state (r/atom \"\"))))\n\n#?(:browser (defn app [props]\n              [:div\n               \"Source Code: \"\n               [:br]\n               [:textarea {:on-change (fn [evt] (reset! input-state (.-value (.-target evt)))) :rows \"10\" :columns \"50\"}]\n               [:br]\n               [:button {:on-click #(reset! output-state (interpreter @input-state))} \"Submit\"]\n               [:div \"Output: \"]\n               [:br]\n               [:div (str @output-state)]]))\n\n#?(:browser (defn -main [] (let [root (.getElementById js/document \"root\")] (rdom/render [app] root)))\n   :default (defn -main [filepath]\n              (println (str \"Input filepath = \" filepath))\n              (let\n               [input (readFileSync filepath #?(:cljs #js{:encoding \"utf8\"}))\n                output (interpreter input)]\n                (doseq [[id val] output] (println (str id \" = \" val))))))\n\n#?(:browser (do (print \"Running...!\") (-main)))\n;; #?(:clj (defn readFileSync [p] (slurp p)))\n\n;; (defn whitespace [q] #(str \\< \\# \\\" \"\\\\s\" q \\\" \\>))\n;; (def w? (whitespace \\?))\n;; ;; (def w* (whitespace \\*))\n;; (def w+ (whitespace \\+))\n;; (defn wrap\n;;   ([f] #(wrap % f))\n;;   ([r f] (str (f) \\' r \\' (f))))\n\n;; #?(:clj (defn str->int [s] (if (integer? s) s (Integer/parseInt s)))\n;;    :cljs (defn str->int [s] (int s)))\n;; (defn negation* [res t]\n;;   (println (str \"Res = \" res \", t = \" t))\n;;   (match t\n;;     [:Unary head & rest] (let [start? (= 0 (count res))\n;;                                nn (mod (if start? (inc (count rest)) (if (= head \"-\") (inc (count rest)) (count rest))) 2)]\n;;                            (concat res (if start?\n;;                                          (if (= 0 nn) res \"~\")\n;;                                          (if (= head \"-\")\n;;                                            [(if (= 0 nn)\n;;                                               \"+\"\n;;                                               \"-\")]\n;;                                            (if (= head \"+\")\n;;                                              (if (= 0 nn)\n;;                                                []\n;;                                                [\"-\"])\n;;                                              (if (= 0 nn)\n;;                                                [head]\n;;                                                [head \"~\"]))))))\n;;     :else (concat res [t])))\n;; (defn replace-negation [s] (let [parse-unary (insta/parser \"<Root> = (S|Rest)*\n;;                                   <S> = Rest* Unary Rest+\n;;                                   Unary = ('*'|'+'|'-'|'(')+ '-'\n;;                                   <Rest> = '('? <#'\\\\s*'> #'[0-9a-zA-Z_]+' <#'\\\\s*'> ')'? <#'\\\\s*'> ('*'|'+'|'-')? <#'\\\\s*'> '('? #'[0-9a-zA-Z_]+'? ')'? \")\n;;                                  res (reduce negation* [] (parse-unary s))]\n;;                              (println\n;;                               (str \"Replace Unary = \" res \" Unary tree = \" (parse-unary s)))\n;;                              res))\n;; (def wrap-w? (wrap w*))\n\n;; (defn assign-lit [vars name lit] (assoc vars name (str->int lit)))\n;; (defn resolve-id [vars id] (let [value (get vars id)\n;;                                  value? (not (nil? value))]\n;;                              (if value? value (throw \"Undeclared Variable\"))))\n\n;; (defn resolve-all [vars exp-terms]\n;;   (map (fn [et]\n;;          (match et\n;;            [:Literal lit] (str->int lit)\n;;            [:Identifier id] (resolve-id vars id)\n;;            :else et)) exp-terms))\n\n\n\n;; (defn solve-postfix [s v] (let [digit? (integer? v)]\n;;                             (if digit? (concat s [v])\n;;                                 (concat (butlast (butlast s)) [(apply v [(last (butlast s)) (last s)])]))))\n;; (defn to-primitive [t] (let [token (str t)\n;;                              digit? (< 0 (count (re-matches #\"-?[0-9]+\" token)))]\n;;                          (println (str \"Current Token = \" token))\n;;                          (if digit? (str->int token)\n;;                              (match [t]\n;;                                [\"+\"] #(+ %1 %2)\n;;                                [\"-\"] #(- %1 %2)\n;;                                [\"*\"] #(* %1 %2)))))\n\n;; (defn matcher [variable-map assignment]\n;;   (match assignment\n;;     ;; [:Assignment [:Identifier name] \"-\" [:Literal & rest]] (assign-lit variable-map name (str \\- (apply str rest)))\n;;     [:Assignment [:Identifier name] [:Literal & rest]] (assign-lit variable-map name (apply str rest))\n;;     [:Assignment [:Identifier name] [:Identifier id]] (assign-lit variable-map name (resolve-id variable-map id))\n;;     [:Assignment [:Identifier name] & r] (do (println \"Got the thing...\")\n;;                                              (println \"Current map: \")\n;;                                              ;;(pprint variable-map)\n;;                                              (println \"Resolving ids...\")\n;;                                              (let\n;;                                               [])\n;;                                              ;;(pprint (apply str (resolve-all variable-map r)))\n\n;;                                             ;; (pprint assignment (:postfix (reduce to-postfix {:stack [] :postfix []} (resolve-all variable-map r)))) \n;;                                              (assign-lit variable-map name\n;;                                                          (first\n;;                                                           (reduce solve-postfix []\n;;                                                                   (map to-primitive\n;;                                                                        (let  [{:keys [stack postfix]}\n;;                                                                               (reduce to-postfix {:stack [] :postfix []}\n;;                                                                                       (replace-negation (apply str (resolve-all variable-map r))))]\n;;                                                                          (if (= 0 (count stack))\n;;                                                                            postfix\n;;                                                                            (concat postfix (reverse stack)))))))))))\n\n;; (defn primitive-op? [c] (or (= c \"+\") (= c \"-\") (= c \"*\")))\n;; (defn to-postfix [{:keys [stack postfix]} litOrOp]\n;;   (match [litOrOp]\n;;     ;;[:Literal lit] (do (println (str \"Got int = \" lit \", stack = \" stack \", postfix = \" postfix)) (let [] {:stack stack :postfix (concat postfix [lit])}))\n;;     [\"~\"] (if (> (count postfix) 0) {:stack stack :postfix (concat postfix [-1 \"*\"])} {:stack (concat stack [\"*\"]) :postfix (concat postfix [-1])})\n;;     [\"(\"] {:stack (concat stack [litOrOp]) :postfix postfix}\n;;     ;; [(:or \\( \\- \\+ \\*)] {:stack (concat stack [litOrOp]) :postfix postfix}\n;;     [\")\"] (let [popped (take-while #(not= \"(\" %) (reverse stack))\n;;                 remaining (take-while (partial not= \"(\") stack)]\n;;             (println (str \"closing parenthesis, popped = \" popped \" , remaining = \" remaining \" postfix = \" (concat postfix popped)))\n;;             {:stack remaining :postfix (concat postfix popped)})\n;;     :else ;;(do \n;;             ;; (println (str \"Got int = \" litOrOp \", stack = \" stack \", postfix = \" postfix))\n;;     (let [next-pf (concat postfix [litOrOp])]\n;;                 ;; (println (str \"is primitive = \" (primitive-op? (last stack)) \" count gt 1 = \" (> (count next-pf) 1) \" return = \"   (if (and (primitive-op? (last stack)) (> (count next-pf) 1))\n\n;;                 ;;                                                                                                                      (if (some #(= \"(\" %) stack)\n;;                 ;;                                                                                                                        {:stack (if  (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat stack [litOrOp]) stack) :postfix  (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat postfix [(last stack)]) next-pf)}\n;;                 ;;                                                                                                                        {:stack (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat (butlast stack) [litOrOp]) (butlast stack)) :postfix (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) next-pf (concat next-pf [(last stack)]))})\n;;                 ;;                                                                                                                      (if (and (some #(= \"(\" %) stack) (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))))\n;;                 ;;                                                                                                                        {:stack (concat stack [litOrOp]) :postfix postfix}\n;;                 ;;                                                                                                                        {:stack (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat stack [litOrOp]) stack) :postfix (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) postfix next-pf)}))))\n;;       (if (and (primitive-op? (last stack)) (> (count next-pf) 1))\n\n;;         (if (some #(= \"(\" %) stack)\n;;           {:stack (if  (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat stack [litOrOp]) stack) :postfix  (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat postfix [(last stack)]) next-pf)}\n;;           {:stack (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat (butlast stack) [litOrOp]) (butlast stack)) :postfix (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) next-pf (concat next-pf [(last stack)]))})\n;;         (if (and (some #(= \"(\" %) stack) (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))))\n;;           {:stack (concat stack [litOrOp]) :postfix postfix}\n;;           {:stack (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) (concat stack [litOrOp]) stack) :postfix (if (= 0 (count (re-matches #\"-?[0-9]+\" litOrOp))) postfix next-pf)}))))\n;;     ;; (do (println (str \"Got string = \" litOrOp \", stack = \" stack \", postfix = \" postfix))\n;;     ;;          (match [litOrOp]\n;;     ;;            [(:or \\( \\- \\+ \\*)] {:stack (concat stack [litOrOp]) :postfix postfix}\n;;     ;;            [\\)] (let [popped (take-while #(and (not= \\( %) ) (reverse stack))\n;;     ;;                       remaining (take-while (partial not= \\() stack)] {:stack remaining :postfix (concat postfix popped)})\n;;     ;;            ))\n;; );;)\n\n\n\n;; (Input) Source \n;;   --- Parse(lang-grammar, source) -->  \n;;    reduce (AST[Assignments[(Identifier, Simple | Complex)]], EmptyVariableMap)\n;;      --- Case Identifier = (Literal | Identifier): Simple Expressions (Aliasing and Direct Assignment) -->\n;;        VariableMap { Identifier = Literal } | AliasingError\n;;      --- Case Identifier = Exp: Complex Expressions (Infix Arithmetic with Unary and/or Binary operators) -->\n;;        - Resolve all Identifiers to literals and replace | LookupError\n;;        - Handle Unary (\n;;            Ignore unary +, \n;;            Remove superfluous negations, \n;;            Replace a+-b with a-b and a--b with a+b, \n;;            Replace unary negation with ~ \n;;        )\n;;        - Convert to post-fix artihmetic stack (\n;;            Replace ~ on stack with [*, -1],\n;;            Process parenthesis\n;;        )\n;;        - Solve Postfix using stack solver (reduce to 1 element)\n;;        VariableMap {Identifier = (head PostfixStack)}\n\n;; (defn -main [filepath]\n;;   (println (str \"Input filepath = \" filepath))\n;;   (let\n;;    [input (readFileSync filepath #?(:cljs #js{:encoding \"utf8\"}))\n;;     parser\n;;     (insta/parser (str \"\n;;                       <Program> = Assignment*\n;;                       Assignment = Identifier <\" (wrap-w? \\=) \"> Exp <';'> \" (w*) \"\n;;                       <Exp> = Exp \" (wrap-w? \\+) \" Term | Exp \" (wrap-w? \\-) \" Term | Term\n;;                       <Term> = Term \" (wrap-w? \\*) \" Fact | Fact\n;;                       <Fact> = \" (wrap-w? \\() \" Exp \" (wrap-w? \\)) \" | '-' Fact | <'+'> Fact | Literal | Identifier \n;;                       Identifier = Letter (Letter | Digit)*\n;;                       Literal = '0' | (NonZeroDigit Digit*)\n;;                       <Letter> = \" (reduce #(str %1  \"|\" %2) (concat (map #(str \\' (char %) \\') (concat (range 65 91) (range 97 123))) [\"'_'\"])) \"\n;;                       <NonZeroDigit> = '1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'\n;;                       <Digit> = '0'|NonZeroDigit\"))\n;;         ;;input \"a = 12; b = 15; c = a *-(a * b); d = a * b - c;\"\n;;     AST (parser input)\n;;     output (do\n;;              (println \"Operator Rule\")\n;;                  ;;(pprint (operator-rule \"---(x+y)*(x+-y)\"))\n;;                  ;;(pprint AST)\n;;              (reduce matcher {} AST))]\n;;     ;;(pprint AST)\n;;     (doseq [[id val] output] (println (str id \" = \" val)))))\n\n;; [:Assignment \n;;  [:Identifier \"z\"] \n;;  [:Fact \"-\" [:Fact \"-\" [:Fact \"-\" [:Fact \"(\" [:Fact [:Literal \"1\"]] \"+\" [:Fact [:Literal \"2\"]] \")\"]]]] \n;;  \"*\" \n;;  [:Fact \"(\" [:Fact [:Literal \"3\"]] \"+\" [:Fact \"-\" [:Fact [:Literal \"4\"]]] \")\"]]\n\n;; [:Assignment \n;;  [:Identifier \"z\"] \n;;  [[:Fact \"-\" [:Fact \"-\" [:Fact \"(\" [:Fact [:Literal \"1\"]] \"+\" [:Fact [:Literal \"2\"]] \")\"]]] \"*\" :Fact [:Fact [:Literal \"-1\"]]] \n;;  \"*\" \n;;  [:Fact \"(\" [:Fact [:Literal \"3\"]] \"+\" [:Fact \"-\" [:Fact [:Literal \"4\"]]] \")\"]]\n\n;; [:Assignment \n;;  [:Identifier \"z\"] \n;;  [:Fact \"(\" [:Fact [:Literal \"1\"]] \"+\" [:Fact [:Literal \"2\"]] \")\" \"*\" :Fact [:Fact [:Literal \"-1\"]]] \n;;  \"*\" \n;;  [:Fact \"(\" [:Fact [:Literal \"3\"]] \"+\" [:Fact \"-\" [:Fact [:Literal \"4\"]]] \")\"]]"]}